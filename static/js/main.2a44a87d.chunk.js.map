{"version":3,"sources":["components/Header.js","components/Usuarios.js","components/NuevoUsuario.js","components/EditarUsuario.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","className","to","Usuarios","scope","NuevoUsuario","type","placeholder","name","EditarUsuario","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2a44a87d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary justify-content-between\">\r\n        <div className=\"container\">\r\n          <h1>\r\n              <Link to={'/'} \r\n                    className=\"text-light\">Pasaporte Digital\r\n              </Link>\r\n          </h1>\r\n        </div>\r\n\r\n        <Link \r\n          to={\"/usuarios/nuevo\"}\r\n          className=\"btn btn-danger nuevo-post d-block d-md-inline-block\">\r\n            Nuevo Usuario &#43;\r\n        </Link>\r\n    </nav>\r\n  );\r\n}\r\n \r\nexport default Header;","import React, {Fragment} from 'react';\r\n\r\nconst Usuarios = () => {\r\n  return ( \r\n    <Fragment>\r\n      <h2 className=\"text-center my-5\">Listado de Usuarios</h2>\r\n\r\n      <table className=\"table table-striped\">\r\n        <thead className=\"bg-primary table-dark\">\r\n            <tr>\r\n              <th scope=\"col\">Nombres</th>\r\n              <th scope=\"col\">Apellidos</th>\r\n              <th scope=\"col\">Acciones</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n          \r\n        </tbody>\r\n      </table>\r\n    </Fragment>\r\n   );\r\n}\r\n \r\nexport default Usuarios;\r\n","import React, {Fragment} from 'react';\r\n\r\nconst NuevoUsuario = () => {\r\n  return ( \r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                \r\n                <h2 className=\"text-center mb-4 font-weight-bold\">\r\n                    Agregar Nuevo Usuario\r\n                </h2>\r\n\r\n                <form>\r\n                  \r\n                  <div className=\"form-group\">\r\n                        <label>Nombres</label>\r\n                        <input \r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Nombre Usuario\"\r\n                          name=\"nombre\"\r\n                        />\r\n                  </div>\r\n\r\n                  <div className=\"form-group\">\r\n                        <label>Cedula</label>\r\n                        <input \r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Cedula\"\r\n                          name=\"cedula\"\r\n                        />\r\n                  </div>\r\n\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary font-weight-bold text-uppercase d-block w-100\"\r\n                    >Agregar\r\n                  </button>\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>      \r\n    </Fragment>\r\n   );\r\n}\r\n \r\nexport default NuevoUsuario;\r\n","import React from 'react';\r\n\r\nconst EditarUsuario = () => {\r\n  return ( \r\n    <h1>Desde Editar producto</h1>\r\n   );\r\n}\r\n \r\nexport default EditarUsuario;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Usuarios from './components/Usuarios';\nimport NuevoUsuario from './components/NuevoUsuario';\nimport EditarUsuario from './components/EditarUsuario';\n\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />      \n      <div className=\"container mt-5\">\n        <Switch>\n            <Route exact path=\"/\" component={Usuarios}/>\n            <Route exact path=\"/usuarios/nuevo\" component={NuevoUsuario}/>\n            <Route exact path=\"/usuarios/editar/:id\" component={EditarUsuario} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n/**1. React router dom npm i react-router-dom */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}